//
//  main.cpp
//  euler.problem2
//
//  Created by Piotr Stanczyk on 1/6/19.
//  Copyright Â© 2019 Piotr Stanczyk. All rights reserved.
//

/**
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 **/

#include <iostream>

using namespace std;

int fib(int x) {
    if (x<2)
        return x;
    
    return (fib(x-1) + fib(x-2));
}

// Direct implementation of the pseudo code from stefan
// note that here we end up calling fib() on each iteration. this in turn calls the recursive implementation so that we end up
// recomputing all the fib numbers leading up to that number
int computeEvenSum()
{
    int sum = 0;
    
    int i=3;
    int f=2;
    while (f<4000000) {
        cout << " f " << f << endl;
        sum += f;
        i+=3;
        f = fib(i);
    }

    return sum;
}

int referenceImplementation()
{
    int f1 = 1;
    int f2 = 2;
    int f = f2 + f1;
    
    int sum = 2;
    while (f<4000000) {
        
        if (f % 2 == 0) {
            cout << " f " << f << endl;
            sum += f;
        }
        f1 = f2;
        f2 = f;
        f = f2 + f1;
    }
    
    return sum;
}

// this is hybrid of hte reference and stefan implementation in that we skip the count to make sure we only land on even fibs
int hybridImplementation()
{
    int f1 = 1;
    int f2 = 2;
    int f = f2 + f1;
    
    int sum = 2;
    while (f<4000000) {
        
        if (f % 2 == 0) {
            cout << " f " << f << endl;
            sum += f;
        }
        f1 = f2;
        f2 = f;
        f = f2 + f1;
    }
    
    return sum;
}

int main(int argc, const char * argv[]) {

    auto start = std::chrono::system_clock::now();
    int sum = computeEvenSum();
    auto end = std::chrono::system_clock::now();
    std::chrono::duration<double> diffReference = end-start;
    cout << "computeEvenSum1 implemention : sum " << sum << " time : " << diffReference.count() << " s\n";
    
    start = std::chrono::system_clock::now();
    sum = referenceImplementation();
    end = std::chrono::system_clock::now();
    diffReference = end-start;
    cout << "reference implemention : sum " << sum << " time : " << diffReference.count() << " s\n";
    
    start = std::chrono::system_clock::now();
    sum = hybridImplementation();
    end = std::chrono::system_clock::now();
    diffReference = end-start;
    cout << "hybrid implemention : sum " << sum << " time : " << diffReference.count() << " s\n";
    
    return 0;
}
